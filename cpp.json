
{
	
		"default": {
			"prefix": "cpp",
			"body": [
			  "#include<bits/stdc++.h>",
			  "using namespace std;",
			  "// #include<ext/pb_ds/assoc_container.hpp>",
			  "// #include<ext/pb_ds/tree_policy.hpp>",
			  "// using namespace __gnu_pbds;",
			  "// #pragma GCC optimize (\"Ofast\")",
			  "// #pragma GCC optimize (\"unroll-loops\")",
			  "#define fast() ios_base::sync_with_stdio(false); cin.tie(NULL);cout.tie(NULL);",
			  "#define ll int64_t",
			  "",
			  "mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());",
			  "#define rnd(x, y) uniform_int_distribution<long long int>(x, y)(rng)",
			  "",
			  "#define endl \"\\n\"",
			  "const ll mod=998244353;",
			  "const ll INF = 1e16;",
			  "#define khatam return 0",
			  "#define all(x) x.begin(),x.end()",
			  "inline ll mod_add(ll a,ll b,ll m=mod){a = a % m;b = b % m;return (((a + b) % m) + m) % m;}",
			  "inline ll mod_mul(ll a,ll b,ll m=mod){a = a % m;b = b % m;return (((a * b) % m) + m) % m;}",
			  "inline ll mod_sub(ll a,ll b,ll m=mod){a = a % m;b = b % m;return (((a - b) % m) + m) % m;}",
			  "ll binPow(ll x,ll n,ll m=mod){ll res=1;while(n){if(n&1) res=(res*x)%m;x=(x*x)%m;n>>=1;}return res;}",
			  "ll modInv(ll i, ll m=mod) {return binPow(i,m-2,m);}",
			  "//vector<ll> fact(100001);",
			  "//ll ncr(int n,int r) {return (n>=r?(fact[n]*modInv(fact[r],mod))%mod*modInv(fact[n-r],mod)%mod:0);}",
			  "//void factorial(){fact[0]=1;rep(i,1,siz1,1)fact[i]=(fact[i-1]*i)%mod;}",
			  "void init(int p){cout<<fixed<<setprecision(p);}",
			  "",
			  "",
			  "void solve()",
			  "{ ",       
			  "",
			  "}",
			  "",
			  "int main(){",
			  "    // remove fast and \"\\n\" in case of interactive tasks",
			  "    fast();",
			  "    int t=1;",
			  "    //cin>>t;",
			  "    while(t--) {",
			  "         solve();",
			  "    }",
			  "    // #ifndef ONLINE_JUDGE",
			  "    //    cerr<<\"\\nTime elapsed: \"<<1000*clock()/CLOCKS_PER_SEC<<\"ms\\n\";",
			  "    //#endif",
			  "    khatam; ",
			  "}"
			],
			"description": "basic c++ template"
		  }
}