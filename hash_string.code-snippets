{
    "String hash": {
        "prefix": "it is a complete snippet for hash",
        "body": [
            "#include<bits/stdc++.h>\r",
            "using namespace std;\r",
            "#define fast() ios_base::sync_with_stdio(false); cin.tie(NULL);cout.tie(NULL);\r",
            "#define ll long long int\r",
            "#define pb push_back\r",
            "#define mp make_pair\r",
            "#define pf push_front\r",
            "#define rep(i,a,b,k) for(ll i=a;i<b;i+=k)\r",
            "#define rept(i,a,b) for(auto i=a;i!=b;++i)\r",
            "#define drep(i,a,b,k) for(ll i=a;i>=b;i-=k)\r",
            "#define mem0(a) memset(a,0,sizeof(a))\r",
            "#define mem1(a) memset(a,0,sizeof(a))\r",
            "#define w(t) while(t--)\r",
            "#define array(arr,n) vector<ll>arr(n);for(ll i=0;i<n;i++)cin>>arr[i];\r",
            "#define ni1(t) ll t;cin>>t;\r",
            "#define ni2(a,b) ll a,b;cin>>a>>b\r",
            "#define ni3(a,b,c) ll a,b,c;cin>>a>>b>>c\r",
            "#define ni4(a,b,c,d) ll a,b,c,d;cin>>a>>b>>c>>d\r",
            "#define ni5(a,b,c,d,e) ll a,b,c,d,e;cin>>a>>b>>c>>d>>e\r",
            "#define ni6(a,b,c,d,e,f) ll a,b,c,d,e,f;cin>>a>>b>>c>>d>>e>>f\r",
            "#define ns(s) string s;cin>>s\r",
            "#define print(x) for(auto ele:x)cout<<ele<<\" \";cout<<endl;\r",
            "#define printp(x)  for(auto ele:x)cout<<ele.first<<\" \"<<ele.second<<endl;\r",
            "#define printm(m) for(auto x:m)cout<<x.first<<\" \"<<x.second<<endl;\r",
            "#define mod 1000000007\r",
            "#define siz1 200005\r",
            "#define siz2 1000005\r",
            "#define khatam return 0\r",
            "#define xt first\r",
            "#define yt second\r",
            "#define all(x) x.begin(),x.end()\r",
            "#ifndef ONLINE_JUDGE\r",
            "#define debug(x) cerr << #x << \" = \" << x << endl\r",
            "#define dbg(x){cerr << #x << \" = {\";int cnt = x.size();for (auto i : x){cerr << i;cnt--;if(cnt)cerr << \", \";}cerr << \"}\"<< endl;}\r",
            "#else\r",
            "#define debug(x) 1\r",
            "#define dbg(x) 1\r",
            "#endif\r",
            "typedef vector<ll> vl;\r",
            "typedef vector<pair<ll,ll>> vll;\r",
            "typedef unordered_map<ll,ll> ull;\r",
            "typedef map<ll,ll> mll;\r",
            "typedef pair<ll,ll>pll;\r",
            "inline ll mod_add(ll a,ll b,ll m){a = a % m;b = b % m;return (((a + b) % m) + m) % m;}\r",
            "inline ll mod_mul(ll a,ll b,ll m){a = a % m;b = b % m;return (((a * b) % m) + m) % m;}\r",
            "inline ll mod_sub(ll a,ll b,ll m){a = a % m;b = b % m;return (((a - b) % m) + m) % m;}\r",
            "ll binPow(ll x,ll n,ll m){ll res=1;while(n){if(n&1) res=(res*x)%m;x=(x*x)%m;n>>=1;}return res;}\r",
            "ll modInv(ll i, ll m) {return binPow(i,m-2,m);}\r",
            "//vl fact(siz1);\r",
            "//ll ncr(int n,int r) {return (n>=r?(fact[n]*modInv(fact[r],mod))%mod*modInv(fact[n-r],mod)%mod:0);}\r",
            "//void factorial(){fact[0]=1;rep(i,1,siz1,1)fact[i]=(fact[i-1]*i)%mod;}\r",
            "ll no_of_digits(ll a){ll cnt=0;while(a>0){a/=10;cnt++;}return cnt;}\r",
            "ll _log(ll a,ll b){ll cnt=0;while(a>0){a/=b;cnt++;}return cnt;}\r",
            "inline ll getmin(ll a,ll b){return min(a,b);}\r",
            "inline ll getmin(ll a,ll b,ll c){return min(min(a,b),c);}\r",
            "inline ll getmin(ll a,ll b,ll c,ll d){return min(a,min(b,min(c,d)));}\r",
            "inline ll getmax(ll a,ll b){return max(a,b);}\r",
            "inline ll getmax(ll a,ll b,ll c){return max(a,max(b,c));}\r",
            "inline ll getmax(ll a,ll b,ll c,ll d){return max(a,max(b,max(c,d)));}\r",
            "\r",
            "\r",
            "void solve()\r",
            "    {\r",
            "       ns(s);\r",
            "     \r",
            "        int n=s.length();\r",
            "        vl hash1(n+1,0),pw(n+1,0),hash2(n+1,0),bnpw(n+1,0);\r",
            "        ll mod1=1000001279;\r",
            "        pw[0]=1;\r",
            "        rep(i,1,n+1,1)pw[i]=(pw[i-1]*p)%mod1;\r",
            "        ll curr=1;\r",
            "      \r",
            "        rep(i,0,n,1){\r",
            "              hash1[i+1]=(s[i]*curr+hash1[i])%mod1; \r",
            "              curr=(curr*p)%mod1;\r",
            "        }\r",
            "        curr=1;\r",
            "        for(int i=n-1;i>=0;i--){\r",
            "             hash2[i]=(s[i]*curr+hash2[i+1])%mod1;\r",
            "             curr=(curr*p)%mod1;\r",
            "        }\r",
            "        rep(i,0,n,1){\r",
            "            rep(j,i,n,1){\r",
            "                ll fhash=(hash1[j+1]-hash1[i]+mod1)%mod1;\r",
            "                ll mdinv=binPow(pw[i],mod1-2,mod1);\r",
            "                bnpw[i]=mdinv;\r",
            "                ll bhash=(hash2[i]-hash2[j+1])%mod1;\r",
            "                fhash=(fhash*mdinv)%mod1;\r",
            "                ll mdinv1=binPow(pw[n-j-1],mod1-2,mod1);\r",
            "                bnpw[n-j-1]=mdinv1;\r",
            "               bhash=(bhash*mdinv1)%mod1;\r",
            "               if(fhash==bhash){\r",
            "                   \r",
            "               }\r",
            "               // cout<<fhash<<\" \"<<bhash<<endl;\r",
            "            }\r",
            "        }\r",
            "        rep(i,0,n,1){\r",
            "            rep(j,i,n,1){\r",
            "                ll fhash=(hash1[j+1]-hash1[i]+mod1)%mod1;\r",
            "                ll bhash=(hash2[i]-hash2[j+1])%mod1;\r",
            "                fhash=(fhash*bnpw[i])%mod1;\r",
            "               bhash=(bhash*bnpw[n-j-1])%mod1;\r",
            "               if(fhash==bhash){\r",
            "                 \r",
            "               }\r",
            "               // cout<<fhash<<\" \"<<bhash<<endl;\r",
            "            }\r",
            "        }\r",
            "    }\r",
            "\r",
            "int main(){\r",
            "    fast();\r",
            "    ni1(t);w(t)\r",
            "    solve();\r",
            "    khatam; \r",
            "}"
        ],
        "description": "it will create forward and backward hash for a string"
    }
}